'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _service = require('../service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The CoreNLP API JSON structure representing a governor
 * @typedef GovernorJSON
 * @property {string} dep
 * @property {number} governor
 * @property {string} governorGloss
 * @property {number} dependent
 * @property {string} dependentGloss
 */

/**
 * Class representing a Governor
 */
var Governor = function () {
  /**
   * Create a Governor
   * @param {string} dep
   * @param {Token} governorToken
   * @param {Token} dependentToken
   */
  function Governor(dep, governorToken, dependentToken) {
    _classCallCheck(this, Governor);

    this._dep = dep;
    this._governorToken = governorToken;
    this._dependentToken = dependentToken;
  }

  /**
   * Get a string representation
   * @return {string} governor
   */


  _createClass(Governor, [{
    key: 'toString',
    value: function toString() {
      return this._dep;
    }
  }, {
    key: 'governor',
    value: function governor() {
      return this._governorToken;
    }
  }, {
    key: 'governorGloss',
    value: function governorGloss() {
      return this._governorToken.word();
    }
  }, {
    key: 'dependent',
    value: function dependent() {
      return this._dependentToken;
    }
  }, {
    key: 'dependentGloss',
    value: function dependentGloss() {
      return this._dependentToken.word();
    }
  }, {
    key: 'dep',
    value: function dep() {
      return this._dep;
    }
  }, {
    key: 'depInfo',
    value: function depInfo() {
      return _service2.default.getGovernorDepInfo(this._dep);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        dep: this.dep(),
        depInfo: this.depInfo(),
        governorToken: this._governorToken,
        dependentToken: this._dependentToken
      };
    }
  }]);

  return Governor;
}();

exports.default = Governor;