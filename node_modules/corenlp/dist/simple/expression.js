'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TregexAnnotator = exports.SemgrexAnnotator = exports.TokensRegexAnnotator = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _annotable = require('./annotable');

var _annotable2 = _interopRequireDefault(_annotable);

var _annotator = require('./annotator');

var _annotator2 = _interopRequireDefault(_annotator);

var _expressionSentence = require('./expression-sentence');

var _expressionSentence2 = _interopRequireDefault(_expressionSentence);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TokensRegexAnnotator = exports.TokensRegexAnnotator = function (_Annotator) {
  _inherits(TokensRegexAnnotator, _Annotator);

  function TokensRegexAnnotator() {
    _classCallCheck(this, TokensRegexAnnotator);

    return _possibleConstructorReturn(this, (TokensRegexAnnotator.__proto__ || Object.getPrototypeOf(TokensRegexAnnotator)).apply(this, arguments));
  }

  return TokensRegexAnnotator;
}(_annotator2.default);

var SemgrexAnnotator = exports.SemgrexAnnotator = function (_Annotator2) {
  _inherits(SemgrexAnnotator, _Annotator2);

  function SemgrexAnnotator() {
    _classCallCheck(this, SemgrexAnnotator);

    return _possibleConstructorReturn(this, (SemgrexAnnotator.__proto__ || Object.getPrototypeOf(SemgrexAnnotator)).apply(this, arguments));
  }

  return SemgrexAnnotator;
}(_annotator2.default);

var TregexAnnotator = exports.TregexAnnotator = function (_Annotator3) {
  _inherits(TregexAnnotator, _Annotator3);

  function TregexAnnotator() {
    _classCallCheck(this, TregexAnnotator);

    return _possibleConstructorReturn(this, (TregexAnnotator.__proto__ || Object.getPrototypeOf(TregexAnnotator)).apply(this, arguments));
  }

  return TregexAnnotator;
}(_annotator2.default);

/**
 * The CoreNLP API JSON structure representing an expression
 * This expression structure can be found as the output of `TokensRegex`,
 * `Semrgex` and `Tregex`.
 * @typedef ExpressionJSON
 * @property {number} index
 * @property {Array.<Array.<ExpressionSentenceMatch>>} sentences
 */

/**
 * Class representing an Expression.
 * @extends Annotable
 */


var Expression = function (_Annotable) {
  _inherits(Expression, _Annotable);

  /**
   * Create an Expression
   * @param {string} text
   * @param {string} pattern - Either `TokensRegex`, `Semrgex` or `Tregex` valid pattern
   */
  function Expression(text, pattern) {
    _classCallCheck(this, Expression);

    var _this4 = _possibleConstructorReturn(this, (Expression.__proto__ || Object.getPrototypeOf(Expression)).call(this, text));

    _this4._pattern = pattern;
    _this4._sentences = [];
    return _this4;
  }

  /**
   * Get a string representation
   * @return {string} expression
   */


  _createClass(Expression, [{
    key: 'toString',
    value: function toString() {
      return this._text;
    }

    /**
     * Get the pattern
     * @returns {string} pattern - The expression pattern
     */

  }, {
    key: 'pattern',
    value: function pattern() {
      return this._pattern;
    }

    /**
     * Get a list of sentences
     * @returns {Array.<ExpressionSentence>} sentences - The expression sentences
     */

  }, {
    key: 'sentences',
    value: function sentences() {
      return this._sentences;
    }

    /**
     * Get the sentence for a given index
     * @param {number} index - The position of the sentence to get
     * @returns {ExpressionSentence} sentence - An expression sentence
     */

  }, {
    key: 'sentence',
    value: function sentence(index) {
      return this.sentences()[index];
    }

    /**
     * Hydrate the Expression instance with Token objects from an annotated Document
     * @see {@link ExpressionSentence#mergeTokensFromSentence}
     * @param {Document} document - An annotated document from where to extract the tokens
     * @returns {Expression} expression - The current expression instance
     */

  }, {
    key: 'mergeTokensFromDocument',
    value: function mergeTokensFromDocument(document) {
      var _this5 = this;

      document.sentences().forEach(function (sentence, i) {
        return _this5.sentence(i).mergeTokensFromSentence(sentence);
      });
      return this;
    }

    /**
     * Update an instance of Expression with data provided by a JSON
     * @param {ExpressionJSON} data - The expression data, as returned by CoreNLP API service
     * @returns {Expression} expression - The current expression instance
     */

  }, {
    key: 'fromJson',
    value: function fromJson(data) {
      if (data.sentences) {
        this._sentences = data.sentences.map(function (sent) {
          return _expressionSentence2.default.fromJson(sent);
        });
      }
      return this;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        text: this._text,
        sentences: this._sentences // TODO this._sentences is an array of array of objects
      };
    }

    /**
     * Get an instance of Expression from a given JSON
     * @param {ExpressionJSON} data - The expression data, as returned by CoreNLP API service
     * @returns {Expression} expression - A new Expression instance
     */

  }], [{
    key: 'fromJson',
    value: function fromJson(data) {
      var instance = new this();
      return instance.fromJson(data);
    }
  }]);

  return Expression;
}(_annotable2.default);

exports.default = Expression;