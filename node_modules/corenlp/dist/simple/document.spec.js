'use strict';

var _document = require('./document');

var _document2 = _interopRequireDefault(_document);

var _sentence = require('./sentence');

var _sentence2 = _interopRequireDefault(_sentence);

var _annotable = require('./annotable');

var _annotable2 = _interopRequireDefault(_annotable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Document', function () {
  var doc = void 0;

  beforeEach(function () {
    doc = new _document2.default('loren ipsum dolor sit amet');
  });

  context('CoreNLP.Document interface', function () {
    it('should follow the CoreNLP.Document contract', function () {
      expect(doc).to.have.property('sentences').that.is.a('function');
      expect(doc).to.have.property('sentence').that.is.a('function');
      expect(doc).to.have.property('coref').that.is.a('function');
    });

    describe('constructor', function () {
      it('should receive a text', function () {
        expect(doc.toString()).to.equals('loren ipsum dolor sit amet');
      });
    });

    it('should extend from Annotable', function () {
      expect(doc).to.be.an.instanceof(_annotable2.default);
    });
  });

  context('Other methods', function () {
    describe('toString', function () {
      it('should return the given text when it is initialized manually', function () {
        expect(doc.toString()).to.equals('loren ipsum dolor sit amet');
      });

      it('should return the computed text when it is initialized by the JSON API', function () {
        var doc2 = _document2.default.fromJson({
          sentences: [{
            tokens: [{ word: 'loren' }, { word: 'ipsum' }]
          }, {
            tokens: [{ word: 'dolor' }, { word: 'sit' }, { word: 'amet' }]
          }]
        });
        expect(doc2.toString()).to.equals('loren ipsum. dolor sit amet');
      });
    });

    describe('sentences / sentence', function () {
      it('should throw an error if there is no annotator', function () {
        expect(function () {
          return doc.sentences();
        }).to.throw(Error, /unmet annotator dependencies/);
        expect(function () {
          return doc.sentence(0);
        }).to.throw(Error, /unmet annotator dependencies/);
      });

      it('should return the sentences, by first applying ssplit annotator', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                expect(function () {
                  return doc.sentences();
                }).to.throw(Error, /unmet annotator dependencies/);
                doc.fromJson({
                  sentences: [{
                    tokens: [{ word: 'loren' }, { word: 'ipsum' }]
                  }]
                });
                expect(doc.sentences()).to.be.an('array');
                expect(doc.sentences()).to.have.property('0').that.is.instanceof(_sentence2.default);
                expect(doc.sentence(0)).to.be.instanceof(_sentence2.default);

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      })));

      it('should return the sentences when it is initialized by the JSON API', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var doc2;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                doc2 = _document2.default.fromJson({
                  sentences: [{
                    tokens: [{ word: 'loren' }, { word: 'ipsum' }]
                  }, {
                    tokens: [{ word: 'dolor' }, { word: 'sit' }, { word: 'amet' }]
                  }]
                });

                expect(doc2.sentences()).to.be.an('array');
                expect(doc2.sentences()).to.have.property('0').that.is.instanceof(_sentence2.default);
                expect(doc2.sentence(0)).to.be.instanceof(_sentence2.default);

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      })));
    });

    describe.skip('coref', function () {
      it('should...', function () {});
    });

    describe('fromJson', function () {
      beforeEach(function () {
        doc = _document2.default.fromJson({
          sentences: [{
            tokens: [{ word: 'loren' }, { word: 'ipsum' }]
          }, {
            tokens: [{ word: 'dolor' }, { word: 'sit' }, { word: 'amet' }]
          }]
        });
      });

      it('should initialize sentences properly', function () {
        expect(doc.sentences()).to.be.an('array');
        expect(doc.sentences()).to.have.property('0').that.is.instanceof(_sentence2.default);
      });
    });
  });
});