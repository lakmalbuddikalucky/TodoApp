'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _expressionSentenceMatch = require('./expression-sentence-match');

var _expressionSentenceMatch2 = _interopRequireDefault(_expressionSentenceMatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class representing an ExpressionSentence.
 */
var ExpressionSentence = function () {
  /**
   * Create an ExpressionSentence
   * @param {Array.<ExpressionSentenceMatch>} matches
   */
  function ExpressionSentence(matches) {
    _classCallCheck(this, ExpressionSentence);

    this._matches = matches;
  }

  /**
   * Retrieves all the contained ExpressionSentenceMatch instances
   * @returns {Array.<ExpressionSentenceMatch>} matches
   */


  _createClass(ExpressionSentence, [{
    key: 'matches',
    value: function matches() {
      return this._matches;
    }

    /**
     * Retrieves a ExpressionSentenceMatch at the index specified
     * @param {number} index
     * @returns {ExpressionSentenceMatch} match
     */

  }, {
    key: 'match',
    value: function match(index) {
      return this._matches[index];
    }

    /**
     * Hydrates the current ExpressionSentence match groups with Token objects.
     * @description
     * The Expression / ExpressionSentence objects comes from outside the standard CoreNLP pipelines.
     * This mean that neither `TokensRegex`, `Semgrex` nor `Tregex` will tag the nodes with POS,
     * lemma, NER or any otehr annotation data.  This is sometimes a usful resource to count with, if
     * you can apart of getting the matching groups, get the annotated tokens for each word in the
     * match group.
     * @returns {ExpressionSentence} instance = The current instance
     */

  }, {
    key: 'mergeTokensFromSentence',
    value: function mergeTokensFromSentence(sentence) {
      var findToken = function findToken(group) {
        return sentence.tokens().find(function (token) {
          return (
            // match group attributes with token attributes
            token.index() === group.begin + 1 && token.toString() === group.text
          );
        });
      };

      this.matches().forEach(function (match) {
        return match.groups().forEach(function (group) {
          // eslint-disable-next-line no-param-reassign
          group.token = findToken(group) || group.token;
        });
      });
      return this;
    }

    /**
     * Update an instance of ExpressionSentence with data provided by a JSON
     * @param {ExpressionSentenceJSON} data - The expression data, as returned by CoreNLP API service
     * @returns {ExpressionSentenceJSON} sentence - The current sentence instance
     */

  }, {
    key: 'fromJson',
    value: function fromJson(data) {
      this._matches = Object.keys(data).filter(function (matchIndex) {
        return matchIndex !== 'length';
      }).map(function (matchIndex) {
        return _expressionSentenceMatch2.default.fromJson(data[matchIndex]);
      });
      return this;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return [].concat(_toConsumableArray(this._matches));
    }

    /**
     * Get an instance of ExpressionSentence from a given JSON of sentence matches
     * @param {ExpressionSentenceJSON} data - The sentence data, as returned by CoreNLP API service
     * @returns {ExpressionSentence} sentence - A new ExpressionSentence instance
     */

  }], [{
    key: 'fromJson',
    value: function fromJson(data) {
      var instance = new this();
      return instance.fromJson(data);
    }
  }]);

  return ExpressionSentence;
}();

exports.default = ExpressionSentence;