'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _annotator = require('../annotator');

var _annotator2 = _interopRequireDefault(_annotator);

var _tokenize = require('./tokenize');

var _tokenize2 = _interopRequireDefault(_tokenize);

var _ssplit = require('./ssplit');

var _ssplit2 = _interopRequireDefault(_ssplit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Class representing an NERClassifierCombiner.
 * @extends Annotator
 * requirements: tokenize, ssplit, pos, lemma, ner
 * @external NERClassifierCombiner
 * Hydrates {@link Token.ner()}
 * @see {@link https://stanfordnlp.github.io/CoreNLP/ner.html|NERClassifierCombiner}
 */
var NERClassifierCombiner = function (_Annotator) {
  _inherits(NERClassifierCombiner, _Annotator);

  /**
   * Create an Annotator
   * @param {Object} [options] a key-value map of options, without the annotator prefix
   */
  function NERClassifierCombiner() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NERClassifierCombiner);

    return _possibleConstructorReturn(this, (NERClassifierCombiner.__proto__ || Object.getPrototypeOf(NERClassifierCombiner)).call(this, 'ner', _extends({
      useSUTime: true,
      // model: null, // throws error on CoreNLP server
      applyNumericClassifiers: true
    }, options), [new _tokenize2.default(), new _ssplit2.default()]));
  }

  return NERClassifierCombiner;
}(_annotator2.default);

exports.default = NERClassifierCombiner;