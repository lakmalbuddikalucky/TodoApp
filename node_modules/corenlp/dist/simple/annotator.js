'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class representing an Annotatror.
 * @extends Annotator
 */
var Annotator = function () {
  /**
   * Create an Annotator
   * @param {string} name
   * @param {Object} [options] a key-value map of options, without the annotator prefix
   * @param {Array.<Annotator>} [dependencies]
   */
  function Annotator(name) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var dependencies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    _classCallCheck(this, Annotator);

    this._name = name;
    this._options = options;
    this._dependencies = dependencies;
  }

  /**
   * Get a string representation
   * @return {string} annotator
   */


  _createClass(Annotator, [{
    key: 'toString',
    value: function toString() {
      return this._name;
    }

    /**
     * Defines whether a given annotator is the same as current, using shallow compare.
     * This is useful for a Document or Sentence to validate if the minimum of annotators required
     * were already applied to them.  Allows at the same time the users to instantiate new annotators
     * and configure them as needed.
     * @param {Annotator} annotator
     * @return {boolean}
     */

  }, {
    key: 'equalsTo',
    value: function equalsTo(annotator) {
      return this._name === annotator.toString();
    }

    /**
     * Get an Object key-value representation of the annotor's options (excluding prefix)
     * @return {Object} options
     */

  }, {
    key: 'options',
    value: function options() {
      return this._options;
    }

    /**
     * Get/Set an option value
     * @param {string} key
     * @param {string|boolean} [value]
     * @return {string} value
     */

  }, {
    key: 'option',
    value: function option(key) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (value === null) {
        return this._options[key];
      }
      this._options[key] = value;
      return value;
    }

    /**
     * Get a list of annotators dependencies
     * @return {Array.<Annotator>} dependencies
     */

  }, {
    key: 'dependencies',
    value: function dependencies() {
      return this._dependencies;
    }

    /**
     * Get a list of annotators dependencies, following by this annotator, all this as
     * a list of strings
     * This is useful to fulfill the `annotators` param in CoreNLP API properties.
     * @return {Array.<string>} pipeline
     */

  }, {
    key: 'pipeline',
    value: function pipeline() {
      return _lodash2.default.uniq(_lodash2.default.flatten(this.dependencies().map(function (annotator) {
        return annotator.pipeline();
      })).concat([this.toString()]));
    }

    /**
     * Get an object of all the Annotator options including the current and all its 
     * dependencies, prefixed by the annotator names
     * This is useful to fulfill the options params in CoreNLP API properties.
     * @return {Array.<string>} pipelineOptions
     */

  }, {
    key: 'pipelineOptions',
    value: function pipelineOptions() {
      var _this = this;

      return _lodash2.default.reduce(this.dependencies().map(function (annotator) {
        return annotator.pipelineOptions();
      }).concat(Object.keys(this.options()).map(function (opt) {
        return _defineProperty({}, _this + '.' + opt, _this.option(opt));
      })), function (ac, option) {
        return _extends({}, ac, option);
      }, {});
    }
  }]);

  return Annotator;
}();

exports.default = Annotator;