'use strict';

var _token = require('./token');

var _token2 = _interopRequireDefault(_token);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Token', function () {
  var token = void 0;

  beforeEach(function () {
    token = new _token2.default('loren');
  });

  context('CoreNLP.Token interface', function () {
    it('should follow the CoreNLP.Token contract', function () {
      // no contract
    });

    describe('constructor', function () {
      it('should receive a text', function () {
        expect(token.toString()).to.equals('loren');
      });
    });
  });

  context('Other methods', function () {
    describe('toString', function () {
      it('should return the given text', function () {
        expect(token.toString()).to.equals('loren');
      });

      it('should return the computed text when it is initialized by the JSON API', function () {
        var token2 = _token2.default.fromJson({
          word: 'loren'
        }, true);
        expect(token2.toString()).to.equals('loren');
      });
    });

    describe('index', function () {
      it('should return the index that was given by the JSON API', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        var token2;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                token2 = _token2.default.fromJson({
                  index: 3,
                  word: 'loren'
                }, true);

                expect(token2.index()).to.be.a('number');
                expect(token2.index()).to.equals(3);

              case 3:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      })));
    });

    describe('word', function () {
      it('should return the word that was initialized with', function () {
        expect(token.word()).to.be.a('string');
        expect(token.word()).to.equals('loren');
      });

      it('should return the word given by the JSON API', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var token2;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                token2 = _token2.default.fromJson({
                  word: 'loren'
                }, true);

                expect(token2.word()).to.be.a('string');
                expect(token2.word()).to.equals('loren');

              case 3:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      })));
    });

    describe('lemma', function () {
      it('should return the lemma given by the JSON API', function () {
        var token2 = _token2.default.fromJson({
          word: 'loren',
          lemma: 'lor'
        }, true);
        expect(token2.lemma()).to.be.a('string');
        expect(token2.lemma()).to.equals('lor');
      });
    });

    describe.skip('pos', function () {
      it('should return the pos given by the JSON API', function () {
        var token2 = _token2.default.fromJson({
          word: 'loren',
          pos: 'noun'
        }, true);
        expect(token2.pos()).to.be.an('object');
        // expect(token.pos()).to.equals('noun');
      });
    });

    describe.skip('parse', function () {
      it('should...', function () {});
    });

    describe.skip('ner', function () {
      it('should return the NER given by the JSON API', function () {
        var token2 = _token2.default.fromJson({
          word: 'loren',
          ner: 'PERSON'
        }, true);
        expect(token2.ner()).to.be.a('string');
        expect(token2.ner()).to.equals('PERSON');
      });
    });

    describe('fromJson', function () {
      beforeEach(function () {
        token = _token2.default.fromJson({
          word: 'loren'
        }, true);
      });

      it('should initialize words properly', function () {
        expect(token.word()).to.be.a('string');
        expect(token.word()).to.equals('loren');
      });
    });
  });
});