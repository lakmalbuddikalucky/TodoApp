'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _service = require('../service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The CoreNLP API JSON structure representing a token
 * @typedef TokenJSON
 * @property {number} index
 * @property {string} word
 * @property {string} originalText
 * @property {number} characterOffsetBegin
 * @property {number} characterOffsetEnd
 * @property {string} before
 * @property {string} after
 */

/**
 * Class representing a Token
 */
var Token = function () {
  /**
   * Create a Token
   * @param {string} word
   */
  function Token(word) {
    _classCallCheck(this, Token);

    this._word = word;
  }

  /**
   * Get a string representation
   * @return {string} token
   */


  _createClass(Token, [{
    key: 'toString',
    value: function toString() {
      return this._word;
    }
  }, {
    key: 'index',
    value: function index() {
      return this._index;
    }
  }, {
    key: 'word',
    value: function word() {
      return this._word;
    }
  }, {
    key: 'lemma',
    value: function lemma() {
      return this._lemma;
    }
  }, {
    key: 'pos',
    value: function pos() {
      return this._pos;
    }
  }, {
    key: 'posInfo',
    value: function posInfo() {
      return _service2.default.getTokenPosInfo(this._pos);
    }
  }, {
    key: 'parse',
    value: function parse() {
      return this._parse;
    }
  }, {
    key: 'ner',
    value: function ner() {
      return this._ner;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        index: this._index,
        word: this._word,
        originalText: this._originalText,
        characterOffsetBegin: this._characterOffsetBegin,
        characterOffsetEnd: this._characterOffsetEnd,
        before: this._before,
        indexafteafter: this._after,
        pos: this._pos,
        posInfo: this.pos(),
        lemma: this._lemma,
        ner: this._ner
      };
    }

    /**
     * Get an instance of Token from a given JSON
     * @param {TokenJSON} data - The token data, as returned by CoreNLP API service
     * @returns {Token} token - A new Token instance
     */

  }], [{
    key: 'fromJson',
    value: function fromJson(data) {
      var instance = new this();
      instance._index = data.index;
      instance._word = data.word;
      instance._originalText = data.originalText;
      instance._characterOffsetBegin = data.characterOffsetBegin;
      instance._characterOffsetEnd = data.characterOffsetEnd;
      instance._before = data.before;
      instance._after = data.after;
      // annotations metadata
      instance._pos = data.pos;
      instance._lemma = data.lemma;
      instance._ner = data.ner;
      return instance;
    }
  }]);

  return Token;
}();

exports.default = Token;