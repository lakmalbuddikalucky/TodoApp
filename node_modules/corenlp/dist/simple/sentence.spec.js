'use strict';

var _sentence = require('./sentence');

var _sentence2 = _interopRequireDefault(_sentence);

var _annotable = require('./annotable');

var _annotable2 = _interopRequireDefault(_annotable);

var _token = require('./token');

var _token2 = _interopRequireDefault(_token);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Sentence', function () {
  var sent = void 0;

  beforeEach(function () {
    sent = new _sentence2.default('loren ipsum dolor sit amet');
  });

  context('CoreNLP.Sentence interface', function () {
    it('should follow the CoreNLP.Sentence contract', function () {
      expect(sent).to.have.property('parse').that.is.a('function');
      expect(sent).to.have.property('words').that.is.a('function');
      expect(sent).to.have.property('word').that.is.a('function');
      expect(sent).to.have.property('posTags').that.is.a('function');
      expect(sent).to.have.property('posTag').that.is.a('function');
      expect(sent).to.have.property('lemmas').that.is.a('function');
      expect(sent).to.have.property('lemma').that.is.a('function');
      expect(sent).to.have.property('nerTags').that.is.a('function');
      expect(sent).to.have.property('nerTag').that.is.a('function');
      expect(sent).to.have.property('governor').that.is.a('function');
      expect(sent).to.have.property('incommingDependencyLabel').that.is.a('function');
      expect(sent).to.have.property('natlogPolarities').that.is.a('function');
      expect(sent).to.have.property('natlogPolarity').that.is.a('function');
      expect(sent).to.have.property('openie').that.is.a('function');
      expect(sent).to.have.property('openieTriples').that.is.a('function');
      expect(sent).to.have.property('algorithms').that.is.a('function');
    });

    describe('constructor', function () {
      it('should receive a text', function () {
        expect(sent.toString()).to.equals('loren ipsum dolor sit amet');
      });
    });

    it('should extend from Annotable', function () {
      expect(sent).to.be.an.instanceof(_annotable2.default);
    });
  });

  context('Other methods', function () {
    describe('toString', function () {
      it('should return the given text when it is initialized manually', function () {
        expect(sent.toString()).to.equals('loren ipsum dolor sit amet');
      });

      it('should return the computed text when it is initialized by the JSON API', function () {
        var sent2 = _sentence2.default.fromJson({
          tokens: [{ word: 'loren' }, { word: 'ipsum' }, { word: 'dolor' }, { word: 'sit' }, { word: 'amet' }]
        }, true);
        expect(sent2.toString()).to.equals('loren ipsum dolor sit amet');
      });
    });

    describe('words / word', function () {
      it('should throw an error if there is no annotator', function () {
        expect(function () {
          return sent.words();
        }).to.throw(Error, /unmet annotator dependencies/);
        expect(function () {
          return sent.word(0);
        }).to.throw(Error, /unmet annotator dependencies/);
      });

      it('should return the words, by first applying ssplit annotator', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                expect(function () {
                  return sent.words();
                }).to.throw(Error, /unmet annotator dependencies/);
                sent.fromJson({
                  sentences: [{
                    tokens: [{ word: 'loren' }]
                  }]
                });
                expect(sent.words()).to.be.an('array');
                expect(sent.words()).to.have.property('0').that.is.a('string');
                expect(sent.word(0)).to.be.a('string');

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, undefined);
      })));

      it('should return the words when it is initialized by the JSON API', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
        var sent2;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                sent2 = _sentence2.default.fromJson({
                  tokens: [{ word: 'loren' }, { word: 'ipsum' }]
                }, true);

                expect(sent2.words()).to.be.an('array');
                expect(sent2.words()).to.have.property('0').that.is.a('string');
                expect(sent2.word(0)).to.be.a('string');

              case 4:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, undefined);
      })));
    });

    describe.skip('posTags / posTag', function () {
      it('should...', function () {});
    });

    describe.skip('lemmas / lemma', function () {
      it('should...', function () {});
    });

    describe.skip('nerTags / nerTag', function () {
      it('should...', function () {});
    });

    describe.skip('governors / governor', function () {
      it('should...', function () {});
    });

    describe.skip('incommingDependencyLabel', function () {
      it('should...', function () {});
    });

    describe.skip('natlogPolarities / natlogPolarity', function () {
      it('should...', function () {});
    });

    describe.skip('openie / openieTriples', function () {
      it('should...', function () {});
    });

    describe('tokens / token', function () {
      it('should throw an error if there is no annotator', function () {
        expect(function () {
          return sent.tokens();
        }).to.throw(Error, /unmet annotator dependencies/);
        expect(function () {
          return sent.token(0);
        }).to.throw(Error, /unmet annotator dependencies/);
      });

      it('should return the tokens, by first applying ssplit annotator', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                expect(function () {
                  return sent.tokens();
                }).to.throw(Error, /unmet annotator dependencies/);
                sent.fromJson({
                  sentences: [{
                    tokens: [{ token: 'loren' }]
                  }]
                });
                expect(sent.tokens()).to.be.an('array');
                expect(sent.tokens()).to.have.property('0').that.is.instanceof(_token2.default);
                expect(sent.token(0)).to.be.instanceof(_token2.default);

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, undefined);
      })));

      it('should return the tokens when it is initialized by the JSON API', _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
        var sent2;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                sent2 = _sentence2.default.fromJson({
                  tokens: [{ token: 'loren' }, { token: 'ipsum' }]
                }, true);

                expect(sent2.tokens()).to.be.an('array');
                expect(sent2.tokens()).to.have.property('0').that.is.instanceof(_token2.default);
                expect(sent2.token(0)).to.be.instanceof(_token2.default);

              case 4:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, undefined);
      })));
    });

    describe('fromJson', function () {
      beforeEach(function () {
        sent = _sentence2.default.fromJson({
          tokens: [{ word: 'loren' }, { word: 'ipsum' }]
        }, true);
      });

      it('should initialize words properly', function () {
        expect(sent.words()).to.be.an('array');
        expect(sent.words()).to.have.property('0').that.is.a('string');
      });
    });
  });
});