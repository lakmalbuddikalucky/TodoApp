'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dependencies = require('./simple/annotator/depparse/dependencies.json');

var _dependencies2 = _interopRequireDefault(_dependencies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Service = function () {
  /**
   * Create a Service
   * @param {ConnectorServer|ConnectorCli} connector
   * @param {('English'|'French'|'German'|'Spanish'|'Unspecified'|'Whitesapce')} [language]
   */
  function Service(connector) {
    var language = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Unspecified';

    _classCallCheck(this, Service);

    this._connector = connector;
    this._language = language;
  }

  _createClass(Service, [{
    key: 'getAnnotationData',
    value: function getAnnotationData(text, annotators) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this._connector.get({
        annotators: annotators,
        text: text,
        options: options,
        language: this._language.toLowerCase()
      });
    }
  }, {
    key: 'getTokensRegexData',
    value: function getTokensRegexData(text, pattern, annotators) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      return this._connector.get({
        annotators: annotators,
        text: text,
        options: _extends({}, options, {
          'tokensregex.pattern': pattern
        }),
        language: this._language.toLowerCase(),
        utility: 'tokensregex'
      });
    }
  }, {
    key: 'getSemgrexData',
    value: function getSemgrexData(text, pattern, annotators) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      return this._connector.get({
        annotators: annotators,
        text: text,
        options: _extends({}, options, {
          'semgrex.pattern': pattern
        }),
        language: this._language.toLowerCase(),
        utility: 'semgrex'
      });
    }
  }, {
    key: 'getTregexData',
    value: function getTregexData(text, pattern, annotators) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      return this._connector.get({
        annotators: annotators,
        text: text,
        options: _extends({}, options, {
          'tregex.pattern': pattern
        }),
        language: this._language.toLowerCase(),
        utility: 'tregex'
      });
    }
  }], [{
    key: 'getTokenPosInfo',
    value: function getTokenPosInfo(pos, languageISO) {
      try {
        // eslint-disable-next-line global-require, import/no-dynamic-require
        return require('./simple/annotator/pos/' + languageISO + '.json').tagset[pos];
      } catch (err) {
        return undefined;
      }
    }
  }, {
    key: 'getSentenceParseInfo',
    value: function getSentenceParseInfo(group, languageISO) {
      try {
        // eslint-disable-next-line global-require, import/no-dynamic-require
        return require('./simple/annotator/parse/' + languageISO + '.json').multiword[group];
      } catch (err) {
        return undefined;
      }
    }
  }, {
    key: 'getGovernorDepInfo',
    value: function getGovernorDepInfo(dep) {
      return _dependencies2.default.dependencies[dep];
    }
  }]);

  return Service;
}();

exports.default = Service;