'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Class representing a Properties set.
 */
var Properties = function () {
  /**
   * Create an Properties
   * @param {Object} props
   */
  function Properties(props) {
    _classCallCheck(this, Properties);

    this._props = _extends({}, props);
  }

  /**
   * Property setter
   * @param {string} name - the property name
   * @param {*} value - the property value
   */


  _createClass(Properties, [{
    key: 'setProperty',
    value: function setProperty(name, value) {
      this._props[name] = value;
    }

    /**
     * Property getter
     * @param {string} name - the property name
     * @param {*} default - the defaut value to return if not set
     * @returns {*} value - the property value
     */

  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      if (typeof this._props[name] !== 'undefined') {
        return this._props[name];
      }
      return defaultValue;
    }

    /**
     * Returns an Object map of the given properties
     * @returns {Object} properties - the properties object
     */

  }, {
    key: 'getProperties',
    value: function getProperties() {
      return _extends({}, this._props);
    }

    /**
     * Returns a JSON object of the given properties
     * @returns {Object} json - the properties object
     */

  }, {
    key: 'toJson',
    value: function toJson() {
      return _extends({}, this._props);
    }

    /**
     * Returns a properties file-like string of the given properties
     * @returns {string} properties - the properties content
     */

  }, {
    key: 'toPropertiessFileContent',
    value: function toPropertiessFileContent() {
      var _this = this;

      return Object.keys(this._props).map(function (propName) {
        return propName + ' = ' + _this._props[propName];
      }).join('\n');
    }
  }]);

  return Properties;
}();

exports.default = Properties;