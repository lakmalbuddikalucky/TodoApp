'use strict';

var _properties = require('./properties');

var _properties2 = _interopRequireDefault(_properties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('Properties', function () {
  var props = void 0;

  describe('constructor', function () {
    it('should have a constructor method', function () {
      expect(_properties2.default).to.have.property('constructor').that.is.a('function');
    });
  });

  describe('getProperty / setProperty / constructor / getProperties', function () {
    beforeEach(function () {
      props = new _properties2.default({ test: 123, bar: 'foo' });
    });

    it('should allow to get prperties', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              expect(props.getProperty('test')).to.equal(123);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    })));

    it('should allow to get a non-defined property', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              expect(props.getProperty('test.und')).to.be.undefined;

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));

    it('should allow to get a non-defined property with a default value', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              expect(props.getProperty('test.und.arr', [])).to.deep.equals([]);

            case 1:
            case 'end':
              return _context3.stop();
          }
        }
      }, _callee3, undefined);
    })));

    it('should allow to set prperties', _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              expect(props.getProperty('test')).to.equal(123);
              expect(props.setProperty('test', 321));
              expect(props.getProperty('test')).to.equal(321);

            case 3:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, undefined);
    })));

    it('should allow to get all prperties', _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              expect(props.getProperties()).to.deep.equal({
                test: 123,
                bar: 'foo'
              });

            case 1:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, undefined);
    })));
  });

  describe('toJson', function () {
    beforeEach(function () {
      props = new _properties2.default({ test: 123, bar: 'foo' });
    });

    it('should allow to get all prperties', _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              expect(props.toJson()).to.deep.equal({
                test: 123,
                bar: 'foo'
              });

            case 1:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, undefined);
    })));
  });

  describe('toPropertiessFileContent', function () {
    beforeEach(function () {
      props = new _properties2.default({ test: 123, bar: 'foo' });
    });

    it('should allow to get all prperties', _asyncToGenerator(regeneratorRuntime.mark(function _callee7() {
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              expect(props.toPropertiessFileContent()).to.deep.equal('test = 123\nbar = foo');

            case 1:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, undefined);
    })));
  });
});