'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _childProcessPromise = require('child-process-promise');

var _tmpFile = require('tmp-file');

var _tmpFile2 = _interopRequireDefault(_tmpFile);

var _loadJsonFile = require('load-json-file');

var _loadJsonFile2 = _interopRequireDefault(_loadJsonFile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var config = {
  classPath: 'corenlp/stanford-corenlp-full-2017-06-09/*',
  mainClass: 'edu.stanford.nlp.pipeline.StanfordCoreNLP',
  props: 'StanfordCoreNLP-spanish.properties'
};

var ConnectorCli = function () {
  /**
   * Create a ConnectorCli
   * @param {Object} config
   * @param {string} config.classPath - The path to the Jar files to be included
   * @param {string} config.mainClass - The name of the Java class that represents the main program
   * @param {string} config.props The - path to the properties file (for example, language specific)
   */
  function ConnectorCli(_ref) {
    var _ref$classPath = _ref.classPath,
        classPath = _ref$classPath === undefined ? config.classPath : _ref$classPath,
        _ref$mainClass = _ref.mainClass,
        mainClass = _ref$mainClass === undefined ? config.mainClass : _ref$mainClass,
        _ref$props = _ref.props,
        props = _ref$props === undefined ? config.props : _ref$props;

    _classCallCheck(this, ConnectorCli);

    this.classPath = classPath;
    this.mainClass = mainClass;
    this.props = props;
  }

  /**
   * @returns {Promise.<Object>}
   */


  _createClass(ConnectorCli, [{
    key: 'get',
    value: function get(_ref2) {
      var annotators = _ref2.annotators,
          text = _ref2.text;

      var params = ['-cp', '\'' + this.classPath + '\'', '' + this.mainClass, '-props', '' + this.props, '-annotators', '' + annotators.join(), '-outputFormat', 'json'];

      return (0, _tmpFile2.default)(text).then(function (file) {
        return (0, _childProcessPromise.exec)('java ' + params.concat(['-file ' + file.path]).join(' ')).then(function (result) {
          var stdout = result.stdout || result.stderr;
          var outfile = stdout.match(/writing to (.*\.json)/)[1];
          return (0, _loadJsonFile2.default)(outfile);
        });
      });
    }
  }]);

  return ConnectorCli;
}();

exports.default = ConnectorCli;