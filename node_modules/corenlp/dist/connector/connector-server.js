'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requestPromiseNative = require('request-promise-native');

var _requestPromiseNative2 = _interopRequireDefault(_requestPromiseNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var config = {
  dsn: 'http://localhost:9000'
};

var ConnectorServer = function () {
  /**
   * Create a ConnectorServer
   * @param {Object} config
   * @param {string} config.dsn - The StanfordCoreNLPServer dsn (example: 'http://localhost:9000')
   */
  function ConnectorServer(_ref) {
    var _ref$dsn = _ref.dsn,
        dsn = _ref$dsn === undefined ? config.dsn : _ref$dsn;

    _classCallCheck(this, ConnectorServer);

    this.dsn = dsn;
  }

  /**
   * @param {Object} config
   * @param {Array.<string>} config.annotators - The list of annotators that edfines the pipeline
   * @param {string} config.text - The text to run the pipeline against
   * @param {Object} config.options - Additinal options (properties) for the pipeline
   * @param {string} config.language - Language full name in CamelCase (eg. Spanish)
   * @param {(''|'tokensregex'|'semgrex'|'tregex')} [utility] - Name of the utility to use
   * NOTE: most of the utilities receives properties, these should be passed via the options param
   * @returns {Promise.<Object>}
   */


  _createClass(ConnectorServer, [{
    key: 'get',
    value: function get(_ref2) {
      var annotators = _ref2.annotators,
          text = _ref2.text,
          options = _ref2.options,
          language = _ref2.language,
          _ref2$utility = _ref2.utility,
          utility = _ref2$utility === undefined ? '' : _ref2$utility;

      var properties = _extends({
        annotators: annotators.join()
      }, options, {
        outputFormat: 'json'
      });

      var baseUrl = this.dsn;
      var queryString = 'pipelineLanguage=' + language + '&properties=' + JSON.stringify(properties);

      /**
       * @description
       * The conenctor should support extensibility to special tools:
       * - For example, Semgrex is an utility that runs in a separate url Hanlder
       *   in StanfordCoreNLPServer
       *   This url is /semgrex, and apart of the normal options, it expects the 
       *   query-string `pattern` as a must.  This `pattern` option is taken here from 
       *   the options object, form the key `semgrex.pattern`.
       */
      if (utility) {
        // https://stanfordnlp.github.io/CoreNLP/corenlp-server.html#query-tokensregex-tokensregex
        baseUrl += '/' + utility;
        queryString += '&' + Object.keys(options).filter(function (opt) {
          return opt.indexOf(utility + '.' === 0);
        }).map(function (opt) {
          return opt.replace(utility + '.', '') + '=' + encodeURI(options[opt]);
        }).join('&');
      }

      var rpOpts = {
        method: 'POST',
        uri: baseUrl + '?' + queryString,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'
        },
        body: text,
        json: true
      };

      return (0, _requestPromiseNative2.default)(rpOpts);
    }
  }]);

  return ConnectorServer;
}();

exports.default = ConnectorServer;