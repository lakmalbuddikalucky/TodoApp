'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Node = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _service = require('../service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Node = function () {
  function Node() {
    var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var word = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var paren = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _classCallCheck(this, Node);

    this._pos = pos;
    this._word = word;
    this._children = children;
    this._parent = paren;
  }

  _createClass(Node, [{
    key: 'pos',
    value: function pos() {
      return this._pos;
    }
  }, {
    key: 'posInfo',
    value: function posInfo() {
      if (this._children.length) {
        return _service2.default.getSentenceParseInfo(this._pos);
      }

      return _service2.default.getTokenPosInfo(this._pos);
    }
  }, {
    key: 'token',
    value: function token() {
      var _token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (_token) {
        this._token = _token;
      }

      return this._token;
    }
  }, {
    key: 'word',
    value: function word() {
      return this._word;
    }
  }, {
    key: 'children',
    value: function children() {
      return this._children;
    }
  }, {
    key: 'appendChild',
    value: function appendChild(node) {
      this._children.push(node);
    }
  }, {
    key: 'parent',
    value: function parent() {
      var paren = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (paren) {
        this._parent = paren;
      }

      return this._parent;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        pos: this._pos,
        posInfo: this.posInfo(),
        word: this._word,
        token: this._token,
        children: this._children
      };
    }
  }]);

  return Node;
}();

/**
 * Class representing a Parse tree structure
 * The nodes are given in order left to right as the words in a sentence appears
 * The leaves are grouped into semantic representations provided by the Annotator
 * This class is pretty useful to use along with the ParserAnnotator
 * @see inspired on {@link http://www.nltk.org/howto/tree.html|Tree}
 * @see the lecture {@link http://www.cs.cornell.edu/courses/cs474/2004fa/lec1.pdf|Tree Syntax of Natural Language}
 */


exports.Node = Node;

var Tree = function () {
  /**
   * Create a Tree
   * @param {Node} node
   */
  function Tree(node) {
    _classCallCheck(this, Tree);

    this.rootNode = node;
  }

  /**
   * Get a Tree string representation for debugging purposes
   * @returns {string} tree
   */


  _createClass(Tree, [{
    key: 'dump',
    value: function dump() {
      return JSON.stringify(this.rootNode, function (key, val) {
        if (val instanceof Node) {
          return val.children().length ? {
            pos: val.pos(),
            info: val.info(),
            children: val.children()
          } : {
            pos: val.pos(),
            info: val.info(),
            word: val.word(),
            token: val.token()
          };
        }

        return val;
      }, 2);
    }

    /**
     * Performs Deep-first Search calling a visitor for each node
     * @see {@link https://en.wikipedia.org/wiki/Depth-first_search|DFS}
     */

  }, {
    key: 'visitDeepFirst',
    value: function visitDeepFirst(visitor) {
      var _this = this;

      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootNode;

      node.children().forEach(function (childNode) {
        _this.visitDeepFirst(childNode);
        visitor(childNode);
      });

      visitor(node);
    }

    /**
     * Performs Deep-first Search calling a visitor for each node, from right to left
     * @see {@link https://en.wikipedia.org/wiki/Depth-first_search|DFS}
     */

  }, {
    key: 'visitDeepFirstRight',
    value: function visitDeepFirstRight(visitor) {
      var _this2 = this;

      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootNode;

      node.children().reverse().forEach(function (childNode) {
        _this2.visitDeepFirst(childNode);
        visitor(childNode);
      });

      visitor(node);
    }

    /**
     * Performs Deep-first Search calling a visitor only over leaves
     * @see {@link https://en.wikipedia.org/wiki/Depth-first_search|DFS}
     */

  }, {
    key: 'visitLeaves',
    value: function visitLeaves(visitor) {
      var _this3 = this;

      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootNode;

      node.children().forEach(function (childNode) {
        if (childNode.children().length) {
          _this3.visitLeaves(visitor, childNode);
        } else {
          visitor(childNode);
        }
      });

      if (!node.children().length) {
        visitor(node);
      }
    }

    /**
     * @param {Sentence} sentence
     * @param {boolean} [doubleLink] whether the child nodes should have a reference
     * to their parent or not - this allows the use of {@link Node.parent()}
     * @returns {Tree} tree
     */

  }], [{
    key: 'fromSentence',
    value: function fromSentence(sentence) {
      var doubleLink = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var parse = sentence.parse();
      if (!parse) {
        throw new Error('Unable to create Tree from Sentence, did you run ParserAnnotator first?');
      }

      var tree = Tree.fromString(parse, doubleLink);
      // link nodes with tokens
      var visitedLeaves = 0;
      // eslint-disable-next-line no-plusplus
      tree.visitLeaves(function (node) {
        return node.token(sentence.token(visitedLeaves++));
      });

      return tree;
    }

    /**
     * @param {string} str
     * @param {boolean} [doubleLink] whether the child nodes should have a reference
     * to their parent or not - this allows the use of {@link Node.parent()}
     * @returns {Tree} tree
     */

  }, {
    key: 'fromString',
    value: function fromString(str) {
      var doubleLink = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      return new Tree(this._transformTree(this._buildTree(str), doubleLink));
    }
  }, {
    key: '_buildTree',
    value: function _buildTree(str) {
      var currentNode = { children: [] };
      var openNodes = [currentNode];
      var l = str.length;
      // eslint-disable-next-line no-plusplus
      for (var i = 0; i < l; i++) {
        if (str[i] === '(') {
          currentNode = { str: '', children: [] };
          openNodes[openNodes.length - 1].children.push(currentNode);
          openNodes.push(currentNode);
        } else if (str[i] === ')') {
          this._cleanNode(currentNode);
          openNodes.pop();
          currentNode = openNodes[openNodes.length - 1];
        } else {
          currentNode.str += str[i];
        }
      }
      return currentNode.children[0];
    }
  }, {
    key: '_cleanNode',
    value: function _cleanNode(node) {
      var str = node.str.trim();
      var delimiterPos = str.indexOf(' ');
      if (delimiterPos > -1) {
        // eslint-disable-next-line no-param-reassign
        node.pos = str.substr(0, delimiterPos);
        // eslint-disable-next-line no-param-reassign
        node.word = str.substr(delimiterPos + 1);
      } else {
        // eslint-disable-next-line no-param-reassign
        node.pos = str;
      }
    }
  }, {
    key: '_transformTree',
    value: function _transformTree(node, doubleLink) {
      var _this4 = this;

      if (doubleLink) {
        var parentNode = new Node(node.pos, node.word);
        node.children.forEach(function (n) {
          var childNode = _this4._transformTree(n);
          childNode.parent(parentNode);
          parentNode.appendChild(childNode);
        });

        return parentNode;
      }

      return new Node(node.pos, node.word, node.children.map(function (n) {
        return _this4._transformTree(n);
      }));
    }
  }]);

  return Tree;
}();

exports.default = Tree;